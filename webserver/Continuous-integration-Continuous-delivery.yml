# yaml-language-server: $schema=https://json.schemastore.org/github-workflow

name: "Integrate"

on:  # yamllint disable-line rule:truthy
    pull_request: null
    push:
        branches:
        - "master"
# Add [skip ci] to commit message to skip CI.

permissions: {}  # yamllint disable-line rule:braces
#permissions: "read-all"
#permissions:
#    contents: "read"

concurrency:
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: true

jobs:
    byte_level:
        name: "0️⃣ Byte-level"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 1
        steps:
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check file permissions"
            run: |
                test "$(find . -type f -not -path './.git/*' -executable)" = ""
        -
            # https://html.spec.whatwg.org/multipage/named-characters.html
            name: "Find non-printable ASCII characters"
            run: |
                #! LC_ALL=C.UTF-8 find . -type f -name '*.php' -print0 \
                #    | xargs --null -- grep --perl-regexp --with-filename --line-number '[^ -~]' \
                #    | grep -v '// @ignore-non-ascii$'
                ! LC_ALL=C.UTF-8 find . -type f -name '*.php' -print0 \
                    | xargs --null -- grep --perl-regexp --with-filename --line-number '[^ -~]'

    syntax_errors:
        name: "1️⃣ Syntax errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.0"
                coverage: "none"
                tools: "parallel-lint"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check source code for syntax errors"
            run: "composer exec -- parallel-lint src/"
            # @TODO Check template files for syntax errors

    unit_tests:
        name: "2️⃣ Unit and functional tests"
        needs:
        - "byte_level"
        - "syntax_errors"
        strategy:
            #fail-fast: false
            matrix:
                php-version:
                - "8.0"
                dependencies:
                - "lowest"
                - "highest"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            #env:
            #    COMPOSER_AUTH: '{"github-oauth":{"github.com":"${{ secrets.GITHUB_TOKEN }}"}}'
            with:
                php-version: "${{ matrix.php-version }}"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            with:
                dependency-versions: "${{ matrix.dependencies }}"
                #composer-options: "--with=laravel/framework:${{ matrix.laravel-constraint }}"
        -
            name: "Execute unit tests"
            run: "composer exec -- pest --ci"
            # @TODO Functional tests
        #-
        #    name: "Tests have failed: upload logs"
        #    if: "${{ failure() }}"
        #    uses: "actions/upload-artifact@v3"
        #    with:
        #        path: "storage/logs/"
        #        name: "larvel-logs-${{ matrix.php-version }}-${{ matrix.dependencies }}"
        #-
        #    name: "Send coverage to Coveralls"
        #    env:
        #        COVERALLS_REPO_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        #    if: "${{ env.COVERALLS_REPO_TOKEN && matrix.php-version == '8.0' && matrix.dependencies == 'highest' }}"
        #    run: |
        #        wget --no-verbose "https://github.com/php-coveralls/php-coveralls/releases/download/v2.5.3/php-coveralls.phar"
        #        php ./php-coveralls.phar --verbose

    static_analysis:
        name: "3️⃣ Static Analysis"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.0"
                coverage: "none"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        #-
        #    name: "Check JSON files"
        #    run: |
        #        find . -type f -name '*.json' \
        #            | xargs -t -L 1 -- php -r 'json_decode(file_get_contents($argv[1]), null, 512, JSON_THROW_ON_ERROR);'
        -
            name: "Validate Composer configuration"
            run: "composer validate --no-interaction --strict"
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            with:
                dependency-versions: "highest"
        -
            name: "Check PSR-4 mapping"
            run: "composer dump-autoload --no-interaction --optimize --strict-psr"
        #-
        #    name: "Check architecture"
        #    run: "composer exec -- phparkitect check --config=vendor/mortexa/laravel-arkitect/src/phparkitect.php"
        -
            name: "Perform static analysis"
            run: "composer exec -- phpstan analyze -l 5 src/"
            # @TODO Cognitive Complexity, Mess Detector, Magic Number Detector, Copy-Paste Detector

    coding_standards:
        name: "4️⃣ Coding Standards"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 5
        steps:
        -
            name: "Set up PHP"
            uses: "shivammathur/setup-php@v2"
            with:
                php-version: "8.0"
                coverage: "none"
                # tools: "phpcs"
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check EditorConfig configuration"
            run: "test -f .editorconfig"
        -
            name: "Check adherence to EditorConfig"
            uses: "greut/eclint-action@v0"
        -
            name: "Look for TAB characters in the middle of the line"
            run: |
                ! git grep --perl-regexp --line-number -I '^(?!//)[^\t]+\t'
        -
            name: "Install dependencies"
            uses: "ramsey/composer-install@v2"
            with:
                dependency-versions: "highest"
        -
            name: "Detect coding standards violations"
            run: "composer exec -- phpcs -s --standard=PSR12 src/"
            # run: "composer exec -- pint -v --test"
        -
            # Move TODO-s into GitHub issues!
            name: "Search for TODO-s and FIXME-s"
            run: |
                ! git grep --extended-regexp --ignore-case '\b(TODO|FIXME)\b' -- ':/' ':!*/integrate\.yml'

    exported_files:
        name: "5️⃣ Exported files"
        needs:
        - "byte_level"
        - "syntax_errors"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 1
        steps:
        -
            name: "Checkout repository"
            uses: "actions/checkout@v3"
        -
            name: "Check for ignored files in the index"
            run: |
                # Add negated files: ':!:path/to/negated'
                test -z "$(git ls-files --ignored --exclude-standard)"
        -
            name: "Check exported files"
            run: |
                EXPECTED="LICENSE,README.md,composer.json"
                CURRENT="$(
                    git archive HEAD \
                        | tar --list --exclude="src" --exclude="src/*" \
                        | paste --serial --delimiters=","
                )"
                echo "CURRENT =${CURRENT}"
                echo "EXPECTED=${EXPECTED}"
                test "${CURRENT}" = "${EXPECTED}"
